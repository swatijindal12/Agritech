@startuml
interface IERC20{
*totalSupply() : uint 256
*balanceOf(owner:address) : uint 256
*allowance(owner:address, spender : address) : uint 256
*transfer(to:address, tokens: uint256): bool
*approve(spender:address, tokens: uint256): bool
*transferFrom(from:address, to:address, tokens: uint256):bool
}

class FarmNFT{
*ownerOf(tokenId:uint256): address
*tokenURI(tokenId: uint256): string

}

interface IAgreementNFT{
*createAgreement(tokenURI: string)
}


class Ownable{
*owner: address
------------
*constructor(): void
*onlyOwner(): modifier

}

class Marketplace{
* IERC20 farmToken
* IAgreementNFT agreementNFT
* IERC721 farmNFT
*struct SellInfo{
sellerAddr: address, tokenId: uint256, price: uint256, isValid: uint256}
*mapping(uint256 => SellInfo) : sellDetails
*mapping(address => uint256) : validatorList
*event Sell(tokenId: uint256, sellerAddr: address, price: uint256)
*event Buy(buyerAddr: address, tokenId: uint256)
-----------
*constructor(farmNFT: address, farmToken: address, agreementNFT: address)
*putFarmOnSell(tokenId: uint256, price: uint256)
*buyFarmLand(tokenId : uint256)
*removeFarmLand(tokenId: uint256)
*validateFarm(tokenId: uint256, action: uint256) 
*addValidator(validatorAddr[]: address) : onlyOwner()
*getSellDetailByTokenId(tokenID[]: uint256) : SellInfo[]
}




IERC20 <|-- Marketplace
Ownable <|-- Marketplace
FarmNFT <|-- Marketplace
IAgreementNFT <|-- Marketplace
@enduml

